import postModel from '../models/postScheme.js';
import commentModel from '../models/commentScheme.js';
import mongoose from 'mongoose';

export const createPost = async (req, res) => {
  try {
    // Check if a post with the same title already exists
    const existingTitlePost = await postModel.findOne({ title: req.body.title });
    const existingTextPost = await postModel.findOne({ text: req.body.text });

    if (existingTitlePost) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—Ç—è —ñ–∑ —Ç–∞–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤–∂–µ —ñ—Å–Ω—É—î' });
    }
    if (existingTextPost) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—Ç—è –∑ —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –≤–∂–µ —ñ—Å–Ω—É—î' });
    }
    const doc = new postModel({
      title: req.body.title,
      text: req.body.text,
      tags: req.body.tags,
      imageUrl: req.body.imageUrl,
      user: req.userId,
    });
    const post = await doc.save();
    res.json(post);
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: '–ù–∞–∂–∞–ª—å —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞	. –°–ø—Ä–æ–±—É–π—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ –ø—ñ–∑–Ω—ñ—à–µ',
    });
  }
};

export const addComment = async (req, res) => {
  try {
    const postId = req.params.id;

    const doc = new commentModel({
      text: req.body.text,
      post: postId,
      user: req.userId,
    });

    const comment = await doc.save();

    const result = await postModel.updateOne({ _id: postId }, { $push: { comments: comment } });
    console.log('üöÄ ~ file: postControllers.js:47 ~ addComment ~ result:', result);
    res.json(comment);
  } catch (err) {
    //! –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Mongoose
    if (err instanceof mongoose.Error.ValidationError) {
      res.status(400).json({ message: err.message });
    } else {
      res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä' });
    }
  }
};

export const deleteComment = async (req, res) => {
  try {
    const postId = req.params.id;
    const commentId = req.params.commentId;
    const doc = await commentModel.findOneAndDelete({
      _id: commentId,
    });

    if (doc) {
      // –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —Ç–µ–ø–µ—Ä –≤–∏–¥–∞–ª—è—î–º–æ –∑ –ø–æ—Å—Ç—É
      const result = await postModel.updateOne({ _id: postId }, { $pull: { comments: commentId } });
      console.log('üöÄ ~ file: postControllers.js:71 ~ deleteComment ~ result:', result);

      if (result.modifiedCount > 0) {
        console.log(`–ö–æ–º–µ–Ω—Ç–∞—Ä ${commentId} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ—Å—Ç–∞ ${postId}`);
      } else {
        console.log(`–ö–æ–º–µ–Ω—Ç–∞—Ä ${commentId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç—ñ ${postId}`);
      }
      res.json({ '–ö–æ–º–µ–Ω—Ç–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ': doc });
    } else {
      return { message: '–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
    }
  } catch (err) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞: ${err.message}`);
    return { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä' };
  }
};

export const getAllPosts = async (req, res) => {
  try {
    const { page, limitPosts, sortBy, tag, limitComments } = req.query;
    const skippedPosts = limitPosts * (page - 1);
    const conditions = {};
    if (tag) {
      conditions.tags = tag;
    }
    const posts = await postModel
      .find(conditions)
      .sort({ [sortBy]: -1 })
      .skip(skippedPosts)
      .limit(limitPosts)
      .populate('user')
      .exec();

    const comments = await commentModel
      .find()
      .sort({ createdAt: -1 })
      .limit(limitComments)
      .populate('user');

    const amount = await postModel.find(conditions).count();

    if (!posts || posts.length === 0) {
      return res.json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π' });
    }
    res.json({ posts, amount, comments });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏' });
  }
};

export const getOnePost = async (req, res) => {
  try {
    const postId = req.params.id;
    const doc = await postModel
      .findOneAndUpdate(
        { _id: postId },
        {
          $inc: {
            viewsCount: 1,
          },
        },
      )
      .populate('user')
      .populate({
        path: 'comments',
        options: { sort: { createdAt: -1 } },
        populate: {
          path: 'user',
          model: 'user',
        },
      })
      .exec();
    // Think about second populate up here

    if (!doc) {
      return res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json(doc);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é' });
  }
};

const deleteAllCommentsForPost = async (postId) => {
  try {
    const deletedComments = await commentModel.deleteMany({ post: postId });
    console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedComments.deletedCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É —Å id ${postId}`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É: ${error.message}`);
  }
};
export const deletePost = async (req, res) => {
  try {
    const postId = req.params.id;
    const doc = await postModel.findOneAndDelete({ _id: postId });

    if (doc) {
      await deleteAllCommentsForPost(postId);
      res.json({ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞': doc });
    } else {
      res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é' });
  }
};

export const updatePost = async (req, res) => {
  try {
    const postId = req.params.id;
    const result = await postModel.updateOne(
      { _id: postId },
      {
        title: req.body.title,
        text: req.body.text,
        tags: req.body.tags,
        imageUrl: req.body.imageUrl,
        user: req.userId,
      },
    );
    if (result.matchedCount === 0) {
      return res.status(404).json({ message: '–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
    }
    if (result.modifiedCount === 0) {
      return res.json({ message: '–í —Å—Ç–∞—Ç—Ç—ñ –Ω–µ–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—å' });
    } else {
      res.json({ message: '–°—Ç–∞—Ç—Ç—è –æ–Ω–æ–≤–ª–µ–Ω–∞' });
    }
  } catch (err) {
    res.status(500).json({
      message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ',
    });
  }
};
